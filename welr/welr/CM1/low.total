dpusds51201 command control csc command control  ccm  csc level reuse component instrument project command control csc includes following components * control task ccmctrltask  initializes dpu fsw spawns tasks bootup schedules production dpu housekeeping data packets monitors execution tasks schedules execution periodic tasks heartbeat message watchdog strobe * command dispatch task ccmcmdtask  receives dispatches real time commands received scu icu major data structures include * static data table keeps track operational state data included table includes housekeeping production rates ccm specific flags number commands executed * command queue commands placed arrive via interrupt icu scu * error event queue accumulates error event codes reported dpu fsw error event codes removed queue placed telemetry packet given interval included dpu housekeeping data
dpusds512111 flight software initialization command control csc initialized spawning ccm control task ccmctrltask  operating startup task usrroot  task spawned calls function ccminit  creates error event queue instantiates needed semaphores installs various isrs finally spawns remaining tasks comprise dpu fsw ccm control task starts reads dpu configuration startup defaults system config area eeprom system config area checksum bad hard coded defaults used ccm control task initializes remaining cscs calling applicable initialization function csc associated task spawning task using vxworks function taskspawn  ccm control task initializes csc passes startup defaults read eeprom parameters task initialization function addition task initialization activities ccminit  also initializes command length verification table calling ccmcmdlengthinit  command processor uses created table verify expected command lengths newly received commands
dpusds512121 control monitoring ccm control task initializes dpu fsw responsibility ccm control task establish successful boot blocking temporary semaphores second timeout spawning scu interface task ccm command task tasks report successful initialization giving semaphore ccm control task toggles bc index parameter eeprom indicate successful boot either task report successful initialization ccm control task disables watchdog strobe effect reboot dpu rationale selecting successful initialization two tasks definition successful boot dpu fsw requires tasks minimum establish ground contact commandability initialization complete task blocks binary semaphore given scui command isr upon arrival hz clock message event clock message arrive semaphore time seconds ccm control task remains alive create transmit dpu housekeeping appropriate intervals perform various periodic processing tasks process memory dump commands final call ccmerrenq  performed order error occurs interrupt service routine global variable set value errno enqueued error event queue part task normal processing
dpusds512122 control monitoring dpu produces eight types housekeeping packets
dpusds512123 control monitoring every time ccm control executes calls ccmperprocess  handle periodic processing responsibilities responsibilities include analog digital conversion updates dpu task monitoring icu heartbeat message production watchdog strobe ccmhealthchk  function called ccmperprocess  verifies execution tasks monitoring amount time elapsed since task last reported tasks report execution ccm control task calling function ccmtaskreport  providing task index task expected execution frequency task execute expected error reported dpu housekeeping command dispatch task fails report extended period dpu execute reboot since impossible command dpu task executing otherwise strobe watchdog
dpusds512124 control monitoring ccm control task also handles memory dump commands event data dump command ccm control task break dump manageable pieces dump small portion time time task awakened purpose deferred activity prevent large dump consuming available cpu time keeping high priority ccm command dispatch task busy extended period
dpusds512131 command handling dpu accepts commands via two interfaces spacecraft via mil std 1553 interface icu via ssi interface dpu commands sent scu icu source command dpu one following * icu command generated sent icu via ssi * scu command generated sent scu via * g icu command generated ground sent dpu via icu ssi * g scu command generated ground sent dpu via scu
dpusds512132 command handling command arrives scu  via interface  icu  via ssi interface  respective isr enqueue command packet command queue give semaphore awaken ccmcmdtask  since possible dpu send command commands may arrive interrupt context task context therefore ccm maintains two queues one interrupt context semaphore protected one task context semaphore protected
dpusds512133 command handling commands dequeued command queue executed command dispatch task ccmcmdtask  task blocks semaphore given ccmcmdenq  ccmcmdtask  wakes semaphore calls ccmcmdprocess  process waiting commands ccmcmdprocess  function subsequently retrieves waiting commands command queue invokes ccmcmddispatch  verify expected length command execute command echo enabled ccmcmddispatch  call ccmhkmkcmdecho  blindly echo command back ground counts rejected executed commands maintained command sent ccmcmdenq  either hz clock time message attitude message spacecraft command forwarded command queue instead executed directly still interrupt context attitude messages forwarded dpacommandsend  hz clock time message parameters passed tistimesync  order synchronize current time non dpu spacecraft observatory messages quietly discarded without reporting error order guarantee ccmcmdtask  task reports ccm control task periodically absence ground command semaphore timeout value seconds semaphore times task verify commands command queue report ccm control task calling ccmtaskreport 
dpusds512141 memory upload download handling two ways upload data dpu * memory poke  d mem dat poke command  * memory upload  d mem dat upld command  memory poke command used small   bytes  data need poked dpu memory location byte limitation derived company command length constraint
dpusds512142 memory upload download handling larger amounts memory must uploaded dpu case software patch full software upload regular memory upload used memory uploads accomplished sending series individual d mem dat upld commands resulting single virtual upload ccsds like sequence  grouping  flags employed dpu fsw accept maximum bytes single virtual upload data contained d mem dat upld command stored temporary dram buffer sequence numbers entire upload successfully received dpu fsw receives last command series fsw verify sequence numbers received verify end end upload checksum write entire temporary buffer target location specified first upload command
dpusds512143 memory upload download handling bytes need uploaded upload file must broken multiple smaller files less equal bytes virtual uploads sent series sequence numbers dpu fsw receive individual upload commands sequence time limit accomplishment single virtual upload long upload continue across ground contacts upload progress last sequence number sent dpu fsw report list missing sequence numbers via event number s ccm missing seqno upload progress needs cancelled discarded issuing d mem dat cncl command
dpusds512144 memory upload download handling data upload several types locations including * dram * eeprom * hardware registers * eeprom filesystem ial d mem dat upld command specify target location destination eeprom filesystem block number provided lieu memory address used dpu fsw formulate filename form eefs1 dpu blk block number case entirety uploaded data received dpu fsw uploaded data written file eeprom filesystem file already exists name overwritten eeprom filesystem reinitialized using command d mem disk init
dpusds512145 memory upload download handling command d mem blk dnld used download data file contained eeprom filesystem upload command block number need provided entire contents filename formed block number downloaded download data location eeprom filesystem command d mem dat dnld used described previously downloads handled deferred fashion avoid consuming excessive cpu time single virtual download appear ground series download packets contents must extracted concatenated order recreated original data sequence
dpusds512151 error collection reporting dpu ccm csc provides centralized error reporting interface ccmerrenq  fsw tasks use report errors time wakes ccmtask  checks see time form error event packet transmission ground ccmtask  calls ccmhkmkerror  actually create packet forward dpu scui transmission ground
dpusds512152 error collection reporting ccmerrenq  function tracks last error reported frequency occurrence error code reported becomes previously reported error code maintained ccmerrenq  repetition count incremented subsequent consecutively reported identical instance previously reported error error code reported one high rate housekeeping reporting period special error s ccm err repeat enqueued repetition count error encoded least significant byte mechanism effectively reduces potential housekeeping telemetry become flooded single repeated error
dpusds512153 error collection reporting s ccm err repeat error encodes count last repeated error low order byte new error reported discussed ccmerrenq  enqueue s ccm err repeat previously repeated error along newly reported error order keep original error codes repeated counts together error packet ccmmkhkerr  enqueues special error code s ccm errq flush special signal ccmerrenq  needs clear error tracking mechanism enqueue repeated error counts associated particular error
dpusds512154 error collection reporting order insure error counts lost due rollover ccmerrenq  checks insure count given error gone one high rate housekeeping reporting period error count exceeds particular reporting period ccmerrenq  enqueue s ccm err repeat error current error count clear error tracking mechanism
dpusds512155 error collection reporting ccmerrenq  may also called interrupt context interrupt context mutual exclusion mechanism implemented error queue cannot used since illegal take semaphore interrupt context circumvent limitation global variable ccmisrerror set appropriate error code error queued next time ccmtask  runs due manner errors handled interrupt context possible loose errors one error occurs interrupt context ccmtask  executes previous error overwritten new error
dpusds512156 error collection reporting boot time error queue exists yet created errors occur early stage error reporting assigned directly global task variable errno reader may refer vxworks programmer guide section information errno errno set error queues created queued error queue calling ccmerrenq 
dpusds51221 public functions routine called mil std 1553 command isr ssi interface isr time command arrives scu icu enqueue command wakeup ccm command dispatch task command executed
dpusds51222 public functions routine called csc order report error event included dpu housekeeping routine called interrupt context static global variable ccmisrerror set error enqueued later  see ccmctrltask   done since error event queue semaphore protected semaphore cannot taken isr error queue semaphore priority inversion set reduce conflicts multiple callers priority inversion situation arise routine also replaces frequently occuring errors special repeat error code repeat error code special error code follows normally reported error code indicate normally reported error code previously reported occurred last high rate reporting period
dpusds51223 public functions routine called dpu fsw task report task executed ccmctrltask  assess health dpu fsw execution
dpusds51224 public functions routine called mil std 1553 command isr hz  arrival clock message  wakeup ccm control task blocks semaphore completing processing
dpusds51231 global data global data items accessed csc
dpusds51301 telescope module access library interface csc telescope module access library interface  tmali  csc manages detector event queue provides api retrieval detector events queue data processing algorithms
dpusds51302 telescope module access library interface csc tmali csc includes following components * queue tmali event queue implemented using ring buffer contains detector events received data capture interface dci driver yet retrieved dpa csc * api facilitates retrieval detector events queue dpa csc api consists tmalinextevent  tmaliwait  functions * set api functions used dpa csc configure dci interface including tmalibitarrangementset  tmalidciframedepthget  tmalidciframedepthset  tmalidciwindowset  tmalidatatimeoutset  tmalidatatimeoutget  * api housekeeping function tmalihkget  gathers csc housekeeping data request command control task * task tmalitask  isr tmalitransfertoqueueisr  work together via semaphore synchronize transfer data dci queue error handling isr tmalidcierrorreportedisr  installed hook routine dci driver used keep track number errors reported dci driver
dpusds513111 normal data exchange sequence tmali csc serves intermediate manager event data supplied dci driver csc eventually delivered dpa csc tmali csc waits notification dci csc frame limit  or data timeout  reached ping pong buffer indicating event data ready served tmali tmali reads event data dci notifies dci swap ping pong buffers ready tmali gives semaphore unblock tmaliwait  call dpa
dpusds513112 normal data exchange sequence dpa csc calls tmaliwait  determine many events waiting read tmaliwait  returns number greater zero dpa calls tmalinextevent  event collected
dpusds513121 initialization tmali csc initialized spawning tmalitask  startup default parameters task allocate memory tmali event queue install dci isrs initialize static variables data structures enter end less loop transfers data dci tmali queue throttled semaphore semdciwait
dpusds513131 data transfer queue initialization tmali csc installs isr hook routine tmalitransfertoqueueisr  dci driver invoked * dci interface reaches programmed frame limit ping pong buffer * dci interface detects data receipt timeout
dpusds513132 data transfer queue tmalitransfertoqueueisr  isr invoked gives semaphore awaken tmalitask  transfer data queue vme bus tmalitask  uses read  function dci driver implements data transfer using high speed assembly language routine tmali ring buffer implemented array tmalitask  function must first examine tmali event queue determine whether data resident dci buffer retrieved using single read  call whether two calls required order correctly handle wrap around case end ring buffer addition tmalitask  function must perform error check verify sufficient space receive data available ping pong buffer insufficient space complete set frames entire contents readable ping pong buffer discarded error s tmali queue full reported using ccmerrenq mechanism discarded data constitutes integral number ccd frames since dci hardware design ensures ping pong transitions occur ccd frame boundaries policy discarding newer data supports scientific viewpoint events collected right burst scientific value events collected later
dpusds513133 data transfer queue events ping pong buffer completely transferred tmali event queue tamlitask  function must re arm hardware swap ping pong buffer ready event tmali finish transferring data ping buffer pong buffer full dci driver issue error interrupt invoking tmalidcierrorreportedisr  response tmalidcierrorreportedisr  set error flag tmalitask  recover tmalidcierrorreportedisr  also gives semdciwait semaphore awaken tmalitask  even though likely already awake since possible tmalitask  completed transfer data time error occurs error also counted tmali hk dci hardware discard events tmalitask  function completes prior transfer recognizes error flag response manually forces ping pong swap re enables data acquisition guarantees complete frames end ping pong buffer considered processing normal operation error occur tmali task fast enough retrieve data dci ping pong buffer events handled fast enough problem result tmali queue full condition reported s tmali queue full error using ccmerrenq  mechanism
dpusds513141 event retrieval queue events retrieved tmali event queue dpa csc via api consisting two functions tmaliwait  tmalinextevent  efficiency following api usage points relevant * dpa csc inline tmalinextevent  function order avoid function call event * dpa csc place event received register complete processing given event resident register retrieving next event * tmalinextevent  function performs error checking order maximize efficiency function therefore dpa csc must keep track number events retrieved versus number provided return tmaliwait 
dpusds513151 ring buffer data structure csc maintains fifo implemented ring buffer temporarily store data received dci processed ring buffer uses two pointers called pin pout keep track data buffer pointers defined reading buffer simplest operation single compare needed verify buffer empty buffer stores events pointers point four byte entities dci specifies data bytes sizes converted reading data
dpusds513152 ring buffer data structure pin pout pointers defined follows * pin   last location filled data * pout   last empty location
dpusds513153 ring buffer data structure definition results following * administration simple one location wasted buffer full situation pin pointer one less pout pointer * buffer empty pin pointer pout pointer equal
dpusds513154 ring buffer data structure separate pointer indicates end buffer pend pointer points last available location buffer advancing either pointer verified whether pointer points last location case pointer reset start buffer pointed pbuf otherwise incremented
dpusds513161 setting dci bit arrangement bit arrangement dci control status register set via tmalibitarrangementset 
dpusds513162 setting hardware windowing hardware windowing function dci activated controlled via tmalidciwindowset  function activates hardware windowing function transfers specified window parameters dci driver
dpusds513163 setting frame depth dci optimum frame depth determined benchmark testing default frame depth frames given data take approximately msec read maximum sized frames maximum data transfer rate
dpusds513164 setting data timeout dci nominal operation frames arrive approximately every msecs dci hardware generate interrupt event data received one ping pong buffers configurable amount time passed additional events received data timeout interrupt error rather typically indicates current exposure completed data timeout interrupt allows tmali csc retrieve trailing events dci ping pong buffer function tmalidcitimeoutset  provides api dci driver timeout setting altered
dpusds513171 housekeeping tmali csc collects housekeeping data retrieved via call tmalihkget  tmali csc housekeeping returned via tmali hk data structure
dpusds51321 public functions routine provides means set bit arrangement used dci bspecialarrangement true dci set special bit arrangement mode otherwise default mode rearrangement set
dpusds513210 public functions data available tmali queue routine blocks semaphore awaiting availability events tmali queue indicated isr data already available tmali queue semaphore taken number events tmali queue determined returned caller parameter tickstowait specifies maximum time function wait data becomes available kernel ticks parameter may set symbolic value forever causes function return data available function called timeout value data becomes avialable within period function return zero  events available  tmali task initialized function returns error
dpusds51322 public functions function gets frame depth ping pong buffers used dci csc frame depth determines many frames read selected ping pong buffer interrupting initial value frame depth setting determined parameter provided stating tmalitask returned value current active value may differ last commanded value commanded value takes effect data transferred hardware ping pong buffer tmali queue  in response frame timeout interrupt see section 3 
dpusds51323 public functions function sets frame depth ping pong buffers used dci csc frame depth determines many frames read selected ping pong buffer interrupting initial value frame depth setting determined parameter provided starting tmalitask maximum value frame depth commanded frames attempt command frame depth value larger maximum result setting timeout default value frames actual setting frame depth could delayed small amount time activity dci bus typically changed dci reported frame level reached timeout condition minimizes chance changing setting hardware close detecting frame event changing frame depth dci csc processing data could cause unpredictable results new tmalidciframedepthset command send previous setting activated new request overwrite previous request dci commanded new value first available opportunity
dpusds51324 public functions routine provides means get current data timeout value used dci returned value current timeout milliseconds timeout discussed document section
dpusds51325 public functions routine provides means set data timeout used dci value requested indicates timeout milliseconds initial value frame depth setting determined parameter provided starting tmalitask maximum value timeout commanded seconds attempt set timeout number larger maximum result setting timeout default value milliseconds
dpusds51326 public functions routine provides means set dci windowing parameters used dci data acquisition commanding dci driver change dci hardware windowing parameters window specification verified setting incorrect function returns error hardware windowing function activated function sets requested hardware window specification activates hardware windowing function
dpusds51327 public functions routine gets housekeeping data stored tmali csc including dci parameters resets tmali internal counters zero caller supplied pointer tmali hk structure nil data returned tmali internal counters still reset zero two four error counters updated within isr context requires task switch safe implementation counters within vxworks could solved using counting semaphore tmali csc design faster method used using free running error counter careful update reported number errors using extra temporary variable increment assignment bit unsigned integers atomic operations resulting counters task safe error events lost means sum errors reported tmalihkget  function equal total numbers errors occurred error reports lost due update internal structures
dpusds51328 public functions function returns next event queue caller caller store value returned function variable defined locally within scope function called return value stored described event value stored rad6000 register rather memory processing therefore much faster since register accesses rad6000 much faster memory accesses compilation option tmali nochecks provided disabling buffer empty checks results slightly faster code used application using function known make proper calls function tmali module compiled tmali nochecks option improper call tmalinextevent function  calling data available tmali buffer  compromise tmali buffer data structure queue structure related pointers described local tmalip header file write pointer  pout  manipulated operations bit pointers atomic mutual exclusion problem occur
dpusds51329 public functions task initializes tmali csc continues read data dci store tmali buffer time dci driver signals data available ping pong buffer availability data dci ping pong buffer signaled tmalitask using semaphore unless fatal error detected initialization task never terminate specified parameters specify size tmali queue initial parameters dci specified values outside allowed range default values used specified queuesize allocated buffersize  in byte events  ring buffer full queuesize 1 events stored buffer